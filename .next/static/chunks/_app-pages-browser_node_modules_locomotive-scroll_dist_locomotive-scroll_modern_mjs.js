"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_locomotive-scroll_dist_locomotive-scroll_modern_mjs"],{

/***/ "(app-pages-browser)/./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ l; }\n/* harmony export */ });\nfunction t() {\n    return t = Object.assign ? Object.assign.bind() : function(t) {\n        for(var e = 1; e < arguments.length; e++){\n            var i = arguments[e];\n            for(var s in i)Object.prototype.hasOwnProperty.call(i, s) && (t[s] = i[s]);\n        }\n        return t;\n    }, t.apply(this, arguments);\n}\nfunction e(t, e, i) {\n    return Math.max(t, Math.min(e, i));\n}\nclass i {\n    advance(t) {\n        var i;\n        if (!this.isRunning) return;\n        let s = !1;\n        if (this.lerp) this.value = (o = this.value, n = this.to, (1 - (l = 1 - Math.exp(-60 * this.lerp * t))) * o + l * n), Math.round(this.value) === this.to && (this.value = this.to, s = !0);\n        else {\n            this.currentTime += t;\n            const i = e(0, this.currentTime / this.duration, 1);\n            s = i >= 1;\n            const o = s ? 1 : this.easing(i);\n            this.value = this.from + (this.to - this.from) * o;\n        }\n        var o, n, l;\n        null == (i = this.onUpdate) || i.call(this, this.value, s), s && this.stop();\n    }\n    stop() {\n        this.isRunning = !1;\n    }\n    fromTo(t, e, param) {\n        let { lerp: i = .1, duration: s = 1, easing: o = (t)=>t, onStart: n, onUpdate: l } = param;\n        this.from = this.value = t, this.to = e, this.lerp = i, this.duration = s, this.easing = o, this.currentTime = 0, this.isRunning = !0, null == n || n(), this.onUpdate = l;\n    }\n}\nclass s {\n    destroy() {\n        var t, e;\n        null == (t = this.wrapperResizeObserver) || t.disconnect(), null == (e = this.contentResizeObserver) || e.disconnect();\n    }\n    get limit() {\n        return {\n            x: this.scrollWidth - this.width,\n            y: this.scrollHeight - this.height\n        };\n    }\n    constructor({ wrapper: t, content: e, autoResize: i = !0 } = {}){\n        if (this.resize = ()=>{\n            this.onWrapperResize(), this.onContentResize();\n        }, this.onWrapperResize = ()=>{\n            this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);\n        }, this.onContentResize = ()=>{\n            this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth;\n        }, this.wrapper = t, this.content = e, i) {\n            const t = function(t, e) {\n                let i;\n                return function() {\n                    let e = arguments, s = this;\n                    clearTimeout(i), i = setTimeout(function() {\n                        t.apply(s, e);\n                    }, 250);\n                };\n            }(this.resize);\n            this.wrapper !== window && (this.wrapperResizeObserver = new ResizeObserver(t), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(t), this.contentResizeObserver.observe(this.content);\n        }\n        this.resize();\n    }\n}\nclass o {\n    emit(t) {\n        for(var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            e[_key - 1] = arguments[_key];\n        }\n        let i = this.events[t] || [];\n        for(let t = 0, s = i.length; t < s; t++)i[t](...e);\n    }\n    on(t, e) {\n        var i;\n        return (null == (i = this.events[t]) ? void 0 : i.push(e)) || (this.events[t] = [\n            e\n        ]), ()=>{\n            var i;\n            this.events[t] = null == (i = this.events[t]) ? void 0 : i.filter((t)=>e !== t);\n        };\n    }\n    off(t, e) {\n        var i;\n        this.events[t] = null == (i = this.events[t]) ? void 0 : i.filter((t)=>e !== t);\n    }\n    destroy() {\n        this.events = {};\n    }\n    constructor(){\n        this.events = {};\n    }\n}\nclass n {\n    on(t, e) {\n        return this.emitter.on(t, e);\n    }\n    destroy() {\n        this.emitter.destroy(), this.element.removeEventListener(\"wheel\", this.onWheel, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchstart\", this.onTouchStart, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchmove\", this.onTouchMove, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchend\", this.onTouchEnd, {\n            passive: !1\n        });\n    }\n    constructor(t, { wheelMultiplier: i = 1, touchMultiplier: s = 2, normalizeWheel: n = !1 }){\n        this.onTouchStart = (t)=>{\n            const { clientX: e, clientY: i } = t.targetTouches ? t.targetTouches[0] : t;\n            this.touchStart.x = e, this.touchStart.y = i, this.lastDelta = {\n                x: 0,\n                y: 0\n            };\n        }, this.onTouchMove = (t)=>{\n            const { clientX: e, clientY: i } = t.targetTouches ? t.targetTouches[0] : t, s = -(e - this.touchStart.x) * this.touchMultiplier, o = -(i - this.touchStart.y) * this.touchMultiplier;\n            this.touchStart.x = e, this.touchStart.y = i, this.lastDelta = {\n                x: s,\n                y: o\n            }, this.emitter.emit(\"scroll\", {\n                deltaX: s,\n                deltaY: o,\n                event: t\n            });\n        }, this.onTouchEnd = (t)=>{\n            this.emitter.emit(\"scroll\", {\n                deltaX: this.lastDelta.x,\n                deltaY: this.lastDelta.y,\n                event: t\n            });\n        }, this.onWheel = (t)=>{\n            let { deltaX: i, deltaY: s } = t;\n            this.normalizeWheel && (i = e(-100, i, 100), s = e(-100, s, 100)), i *= this.wheelMultiplier, s *= this.wheelMultiplier, this.emitter.emit(\"scroll\", {\n                deltaX: i,\n                deltaY: s,\n                event: t\n            });\n        }, this.element = t, this.wheelMultiplier = i, this.touchMultiplier = s, this.normalizeWheel = n, this.touchStart = {\n            x: null,\n            y: null\n        }, this.emitter = new o, this.element.addEventListener(\"wheel\", this.onWheel, {\n            passive: !1\n        }), this.element.addEventListener(\"touchstart\", this.onTouchStart, {\n            passive: !1\n        }), this.element.addEventListener(\"touchmove\", this.onTouchMove, {\n            passive: !1\n        }), this.element.addEventListener(\"touchend\", this.onTouchEnd, {\n            passive: !1\n        });\n    }\n}\nclass l {\n    destroy() {\n        this.emitter.destroy(), this.options.wrapper.removeEventListener(\"scroll\", this.onNativeScroll, {\n            passive: !1\n        }), this.virtualScroll.destroy(), this.dimensions.destroy(), this.toggleClass(\"lenis\", !1), this.toggleClass(\"lenis-smooth\", !1), this.toggleClass(\"lenis-scrolling\", !1), this.toggleClass(\"lenis-stopped\", !1), this.toggleClass(\"lenis-locked\", !1);\n    }\n    on(t, e) {\n        return this.emitter.on(t, e);\n    }\n    off(t, e) {\n        return this.emitter.off(t, e);\n    }\n    setScroll(t) {\n        this.isHorizontal ? this.rootElement.scrollLeft = t : this.rootElement.scrollTop = t;\n    }\n    resize() {\n        this.dimensions.resize();\n    }\n    emit() {\n        this.emitter.emit(\"scroll\", this);\n    }\n    reset() {\n        this.isLocked = !1, this.isScrolling = !1, this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.animate.stop();\n    }\n    start() {\n        this.isStopped = !1, this.reset();\n    }\n    stop() {\n        this.isStopped = !0, this.animate.stop(), this.reset();\n    }\n    raf(t) {\n        const e = t - (this.time || t);\n        this.time = t, this.animate.advance(.001 * e);\n    }\n    scrollTo(t) {\n        let { offset: i = 0, immediate: s = !1, lock: o = !1, duration: n = this.options.duration, easing: l = this.options.easing, lerp: r = !n && this.options.lerp, onComplete: h = null, force: a = !1, programmatic: c = !0 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        if (!this.isStopped && !this.isLocked || a) {\n            if ([\n                \"top\",\n                \"left\",\n                \"start\"\n            ].includes(t)) t = 0;\n            else if ([\n                \"bottom\",\n                \"right\",\n                \"end\"\n            ].includes(t)) t = this.limit;\n            else {\n                var u;\n                let e;\n                if (\"string\" == typeof t ? e = document.querySelector(t) : null != (u = t) && u.nodeType && (e = t), e) {\n                    if (this.options.wrapper !== window) {\n                        const t = this.options.wrapper.getBoundingClientRect();\n                        i -= this.isHorizontal ? t.left : t.top;\n                    }\n                    const s = e.getBoundingClientRect();\n                    t = (this.isHorizontal ? s.left : s.top) + this.animatedScroll;\n                }\n            }\n            if (\"number\" == typeof t) {\n                if (t += i, t = Math.round(t), this.options.infinite ? c && (this.targetScroll = this.animatedScroll = this.scroll) : t = e(0, t, this.limit), s) return this.animatedScroll = this.targetScroll = t, this.setScroll(this.scroll), this.reset(), void (null == h || h(this));\n                if (!c) {\n                    if (t === this.targetScroll) return;\n                    this.targetScroll = t;\n                }\n                this.animate.fromTo(this.animatedScroll, t, {\n                    duration: n,\n                    easing: l,\n                    lerp: r,\n                    onStart: ()=>{\n                        o && (this.isLocked = !0), this.isScrolling = !0;\n                    },\n                    onUpdate: (t, e)=>{\n                        this.isScrolling = !0, this.velocity = t - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t, this.setScroll(this.scroll), c && (this.targetScroll = t), e || this.emit(), e && (this.reset(), this.emit(), null == h || h(this), this.__preventNextScrollEvent = !0, requestAnimationFrame(()=>{\n                            delete this.__preventNextScrollEvent;\n                        }));\n                    }\n                });\n            }\n        }\n    }\n    get rootElement() {\n        return this.options.wrapper === window ? document.documentElement : this.options.wrapper;\n    }\n    get limit() {\n        return this.dimensions.limit[this.isHorizontal ? \"x\" : \"y\"];\n    }\n    get isHorizontal() {\n        return \"horizontal\" === this.options.orientation;\n    }\n    get actualScroll() {\n        return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;\n    }\n    get scroll() {\n        return this.options.infinite ? (this.animatedScroll % (t = this.limit) + t) % t : this.animatedScroll;\n        var t;\n    }\n    get progress() {\n        return 0 === this.limit ? 1 : this.scroll / this.limit;\n    }\n    get isSmooth() {\n        return this.__isSmooth;\n    }\n    set isSmooth(t) {\n        this.__isSmooth !== t && (this.__isSmooth = t, this.toggleClass(\"lenis-smooth\", t));\n    }\n    get isScrolling() {\n        return this.__isScrolling;\n    }\n    set isScrolling(t) {\n        this.__isScrolling !== t && (this.__isScrolling = t, this.toggleClass(\"lenis-scrolling\", t));\n    }\n    get isStopped() {\n        return this.__isStopped;\n    }\n    set isStopped(t) {\n        this.__isStopped !== t && (this.__isStopped = t, this.toggleClass(\"lenis-stopped\", t));\n    }\n    get isLocked() {\n        return this.__isLocked;\n    }\n    set isLocked(t) {\n        this.__isLocked !== t && (this.__isLocked = t, this.toggleClass(\"lenis-locked\", t));\n    }\n    get className() {\n        let t = \"lenis\";\n        return this.isStopped && (t += \" lenis-stopped\"), this.isLocked && (t += \" lenis-locked\"), this.isScrolling && (t += \" lenis-scrolling\"), this.isSmooth && (t += \" lenis-smooth\"), t;\n    }\n    toggleClass(t, e) {\n        this.rootElement.classList.toggle(t, e), this.emitter.emit(\"className change\", this);\n    }\n    constructor({ wrapper: e = window, content: l = document.documentElement, wheelEventsTarget: r = e, eventsTarget: h = r, smoothWheel: a = !0, smoothTouch: c = !1, syncTouch: u = !1, syncTouchLerp: p = .1, __iosNoInertiaSyncTouchLerp: d = .4, touchInertiaMultiplier: m = 35, duration: v, easing: g = (t)=>Math.min(1, 1.001 - Math.pow(2, -10 * t)), lerp: S = !v && .1, infinite: w = !1, orientation: f = \"vertical\", gestureOrientation: y = \"vertical\", touchMultiplier: T = 1, wheelMultiplier: z = 1, normalizeWheel: _ = !1, autoResize: M = !0 } = {}){\n        this.onVirtualScroll = (param)=>{\n            let { deltaX: e, deltaY: i, event: s } = param;\n            if (s.ctrlKey) return;\n            const o = s.type.includes(\"touch\"), n = s.type.includes(\"wheel\");\n            if (\"both\" === this.options.gestureOrientation && 0 === e && 0 === i || \"vertical\" === this.options.gestureOrientation && 0 === i || \"horizontal\" === this.options.gestureOrientation && 0 === e || o && \"vertical\" === this.options.gestureOrientation && 0 === this.scroll && !this.options.infinite && i <= 0) return;\n            let l = s.composedPath();\n            if (l = l.slice(0, l.indexOf(this.rootElement)), l.find((t)=>{\n                var e;\n                return (null == t.hasAttribute ? void 0 : t.hasAttribute(\"data-lenis-prevent\")) || o && (null == t.hasAttribute ? void 0 : t.hasAttribute(\"data-lenis-prevent-touch\")) || n && (null == t.hasAttribute ? void 0 : t.hasAttribute(\"data-lenis-prevent-wheel\")) || (null == (e = t.classList) ? void 0 : e.contains(\"lenis\"));\n            })) return;\n            if (this.isStopped || this.isLocked) return void s.preventDefault();\n            if (this.isSmooth = (this.options.smoothTouch || this.options.syncTouch) && o || this.options.smoothWheel && n, !this.isSmooth) return this.isScrolling = !1, void this.animate.stop();\n            s.preventDefault();\n            let r = i;\n            \"both\" === this.options.gestureOrientation ? r = Math.abs(i) > Math.abs(e) ? i : e : \"horizontal\" === this.options.gestureOrientation && (r = e);\n            const h = o && this.options.syncTouch, a = o && \"touchend\" === s.type && Math.abs(r) > 1;\n            a && (r = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + r, t({\n                programmatic: !1\n            }, h && {\n                lerp: a ? this.syncTouchLerp : this.options.__iosNoInertiaSyncTouchLerp\n            }));\n        }, this.onNativeScroll = ()=>{\n            if (!this.__preventNextScrollEvent && !this.isScrolling) {\n                const t = this.animatedScroll;\n                this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.direction = Math.sign(this.animatedScroll - t), this.emit();\n            }\n        }, window.lenisVersion = \"1.0.29\", e !== document.documentElement && e !== document.body || (e = window), this.options = {\n            wrapper: e,\n            content: l,\n            wheelEventsTarget: r,\n            eventsTarget: h,\n            smoothWheel: a,\n            smoothTouch: c,\n            syncTouch: u,\n            syncTouchLerp: p,\n            __iosNoInertiaSyncTouchLerp: d,\n            touchInertiaMultiplier: m,\n            duration: v,\n            easing: g,\n            lerp: S,\n            infinite: w,\n            gestureOrientation: y,\n            orientation: f,\n            touchMultiplier: T,\n            wheelMultiplier: z,\n            normalizeWheel: _,\n            autoResize: M\n        }, this.animate = new i, this.emitter = new o, this.dimensions = new s({\n            wrapper: e,\n            content: l,\n            autoResize: M\n        }), this.toggleClass(\"lenis\", !0), this.velocity = 0, this.isLocked = !1, this.isStopped = !1, this.isSmooth = u || a || c, this.isScrolling = !1, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener(\"scroll\", this.onNativeScroll, {\n            passive: !1\n        }), this.virtualScroll = new n(h, {\n            touchMultiplier: T,\n            wheelMultiplier: z,\n            normalizeWheel: _\n        }), this.virtualScroll.on(\"scroll\", this.onVirtualScroll);\n    }\n}\n //# sourceMappingURL=lenis.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/locomotive-scroll/dist/locomotive-scroll.modern.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/locomotive-scroll/dist/locomotive-scroll.modern.mjs ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ h; }\n/* harmony export */ });\n/* harmony import */ var _studio_freight_lenis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @studio-freight/lenis */ \"(app-pages-browser)/./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs\");\n\nfunction s() {\n    return s = Object.assign ? Object.assign.bind() : function(t) {\n        for(var s = 1; s < arguments.length; s++){\n            var e = arguments[s];\n            for(var i in e)Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);\n        }\n        return t;\n    }, s.apply(this, arguments);\n}\nclass e {\n    _init() {\n        this.observer = new IntersectionObserver((t)=>{\n            t.forEach((t)=>{\n                const s = this.scrollElements.find((s)=>s.$el === t.target);\n                t.isIntersecting ? (s && (s.isAlreadyIntersected = !0), this._setInview(t)) : s && s.isAlreadyIntersected && this._setOutOfView(t);\n            });\n        }, {\n            rootMargin: this.rootMargin\n        });\n        for (const t of this.scrollElements)this.observe(t.$el);\n    }\n    destroy() {\n        this.observer.disconnect();\n    }\n    observe(t) {\n        t && this.observer.observe(t);\n    }\n    unobserve(t) {\n        t && this.observer.unobserve(t);\n    }\n    _setInview(t) {\n        const s = this.scrollElements.find((s)=>s.$el === t.target);\n        this.IORaf && (null == s || s.setInteractivityOn()), !this.IORaf && (null == s || s.setInview());\n    }\n    _setOutOfView(t) {\n        const s = this.scrollElements.find((s)=>s.$el === t.target);\n        this.IORaf && (null == s || s.setInteractivityOff()), !this.IORaf && (null == s || s.setOutOfView()), null != s && s.attributes.scrollRepeat || this.IORaf || this.unobserve(t.target);\n    }\n    constructor({ scrollElements: t, rootMargin: s = \"-1px -1px -1px -1px\", IORaf: e }){\n        this.scrollElements = void 0, this.rootMargin = void 0, this.IORaf = void 0, this.observer = void 0, this.scrollElements = t, this.rootMargin = s, this.IORaf = e, this._init();\n    }\n}\nfunction i(t, s, e, i, r) {\n    return e + ((r - t) / (s - t) * (i - e) || 0);\n}\nfunction r(t, s) {\n    return t.reduce((t, e)=>Math.abs(e - s) < Math.abs(t - s) ? e : t);\n}\nclass l {\n    _init() {\n        this.needRaf && (this.modularInstance && this.attributes.scrollModuleProgress && this._getProgressModularModules(), this._resize());\n    }\n    onResize(param) {\n        let { currentScroll: t } = param;\n        this.currentScroll = t, this._resize();\n    }\n    onRender(param) {\n        let { currentScroll: t, smooth: s } = param;\n        const e = \"vertical\" === this.scrollOrientation ? window.innerHeight : window.innerWidth;\n        if (this.currentScroll = t, this._computeProgress(), this.attributes.scrollSpeed && !isNaN(this.attributes.scrollSpeed)) if (this.attributes.scrollEnableTouchSpeed || s) {\n            if (this.isInFold) {\n                const t = Math.max(0, this.progress);\n                this.translateValue = t * e * this.attributes.scrollSpeed * -1;\n            } else {\n                const t = i(0, 1, -1, 1, this.progress);\n                this.translateValue = t * e * this.attributes.scrollSpeed * -1;\n            }\n            this.$el.style.transform = \"vertical\" === this.scrollOrientation ? \"translate3d(0, \".concat(this.translateValue, \"px, 0)\") : \"translate3d(\".concat(this.translateValue, \"px, 0, 0)\");\n        } else this.translateValue && (this.$el.style.transform = \"translate3d(0, 0, 0)\"), this.translateValue = 0;\n    }\n    setInview() {\n        if (this.isInview) return;\n        this.isInview = !0, this.$el.classList.add(this.attributes.scrollClass);\n        const t = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(\"enter\", t);\n    }\n    setOutOfView() {\n        if (!this.isInview || !this.attributes.scrollRepeat) return;\n        this.isInview = !1, this.$el.classList.remove(this.attributes.scrollClass);\n        const t = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(\"leave\", t);\n    }\n    setInteractivityOn() {\n        this.isInteractive || (this.isInteractive = !0, this.subscribeElementUpdateFn(this));\n    }\n    setInteractivityOff() {\n        this.isInteractive && (this.isInteractive = !1, this.unsubscribeElementUpdateFn(this), null != this.lastProgress && this._computeProgress(r([\n            0,\n            1\n        ], this.lastProgress)));\n    }\n    _resize() {\n        this.metrics.bcr = this.$el.getBoundingClientRect(), this._computeMetrics(), this._computeIntersection(), this.isFirstResize && (this.isFirstResize = !1, this.isInFold && this.setInview());\n    }\n    _computeMetrics() {\n        const { top: t, left: s, height: e, width: i } = this.metrics.bcr, r = \"vertical\" === this.scrollOrientation ? window.innerHeight : window.innerWidth, l = \"vertical\" === this.scrollOrientation ? e : i;\n        this.metrics.offsetStart = this.currentScroll + (\"vertical\" === this.scrollOrientation ? t : s) - this.translateValue, this.metrics.offsetEnd = this.metrics.offsetStart + l, this.isInFold = this.metrics.offsetStart < r && !this.attributes.scrollIgnoreFold;\n    }\n    _computeIntersection() {\n        const t = \"vertical\" === this.scrollOrientation ? window.innerHeight : window.innerWidth, s = \"vertical\" === this.scrollOrientation ? this.metrics.bcr.height : this.metrics.bcr.width, e = this.attributes.scrollOffset.split(\",\"), i = null != e[0] ? e[0].trim() : \"0\", r = null != e[1] ? e[1].trim() : \"0\", l = this.attributes.scrollPosition.split(\",\");\n        let n = null != l[0] ? l[0].trim() : \"start\";\n        const o = null != l[1] ? l[1].trim() : \"end\", a = i.includes(\"%\") ? t * parseInt(i.replace(\"%\", \"\").trim()) * .01 : parseInt(i), c = r.includes(\"%\") ? t * parseInt(r.replace(\"%\", \"\").trim()) * .01 : parseInt(r);\n        switch(this.isInFold && (n = \"fold\"), n){\n            case \"start\":\n            default:\n                this.intersection.start = this.metrics.offsetStart - t + a;\n                break;\n            case \"middle\":\n                this.intersection.start = this.metrics.offsetStart - t + a + .5 * s;\n                break;\n            case \"end\":\n                this.intersection.start = this.metrics.offsetStart - t + a + s;\n                break;\n            case \"fold\":\n                this.intersection.start = 0;\n        }\n        switch(o){\n            case \"start\":\n                this.intersection.end = this.metrics.offsetStart - c;\n                break;\n            case \"middle\":\n                this.intersection.end = this.metrics.offsetStart - c + .5 * s;\n                break;\n            default:\n                this.intersection.end = this.metrics.offsetStart - c + s;\n        }\n        if (this.intersection.end <= this.intersection.start) switch(o){\n            case \"start\":\n            default:\n                this.intersection.end = this.intersection.start + 1;\n                break;\n            case \"middle\":\n                this.intersection.end = this.intersection.start + .5 * s;\n                break;\n            case \"end\":\n                this.intersection.end = this.intersection.start + s;\n        }\n    }\n    _computeProgress(t) {\n        const s = null != t ? t : (e = i(this.intersection.start, this.intersection.end, 0, 1, this.currentScroll)) < 0 ? 0 : e > 1 ? 1 : e;\n        var e;\n        if (this.progress = s, s != this.lastProgress) {\n            if (this.lastProgress = s, this.attributes.scrollCssProgress && this._setCssProgress(s), this.attributes.scrollEventProgress && this._setCustomEventProgress(s), this.attributes.scrollModuleProgress) for (const t of this.progressModularModules)this.modularInstance && this.modularInstance.call(\"onScrollProgress\", s, t.moduleName, t.moduleId);\n            s > 0 && s < 1 && this.setInview(), 0 === s && this.setOutOfView(), 1 === s && this.setOutOfView();\n        }\n    }\n    _setCssProgress() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        this.$el.style.setProperty(\"--progress\", t.toString());\n    }\n    _setCustomEventProgress() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        const s = this.attributes.scrollEventProgress;\n        if (!s) return;\n        const e = new CustomEvent(s, {\n            detail: {\n                target: this.$el,\n                progress: t\n            }\n        });\n        window.dispatchEvent(e);\n    }\n    _getProgressModularModules() {\n        if (!this.modularInstance) return;\n        const t = Object.keys(this.$el.dataset).filter((t)=>t.includes(\"module\")), s = Object.entries(this.modularInstance.modules);\n        if (t.length) for (const e of t){\n            const t = this.$el.dataset[e];\n            if (!t) return;\n            for (const e of s){\n                const [s, i] = e;\n                t in i && this.progressModularModules.push({\n                    moduleName: s,\n                    moduleId: t\n                });\n            }\n        }\n    }\n    _getScrollCallFrom() {\n        const t = r([\n            this.intersection.start,\n            this.intersection.end\n        ], this.currentScroll);\n        return this.intersection.start === t ? \"start\" : \"end\";\n    }\n    _dispatchCall(t, s) {\n        var e, i;\n        const r = null == (e = this.attributes.scrollCall) ? void 0 : e.split(\",\"), l = null == (i = this.attributes) ? void 0 : i.scrollCallSelf;\n        if (r && r.length > 1) {\n            var n;\n            const [e, i, o] = r;\n            let a;\n            a = l ? this.$el.dataset[\"module\".concat(i.trim())] : o, this.modularInstance && this.modularInstance.call(e.trim(), {\n                target: this.$el,\n                way: t,\n                from: s\n            }, i.trim(), null == (n = a) ? void 0 : n.trim());\n        } else if (r) {\n            const [e] = r, i = new CustomEvent(e, {\n                detail: {\n                    target: this.$el,\n                    way: t,\n                    from: s\n                }\n            });\n            window.dispatchEvent(i);\n        }\n    }\n    constructor({ $el: t, id: s, modularInstance: e, subscribeElementUpdateFn: i, unsubscribeElementUpdateFn: r, needRaf: l, scrollOrientation: n }){\n        var o, a, c, h, d;\n        this.$el = void 0, this.id = void 0, this.needRaf = void 0, this.attributes = void 0, this.scrollOrientation = void 0, this.isAlreadyIntersected = void 0, this.intersection = void 0, this.metrics = void 0, this.currentScroll = void 0, this.translateValue = void 0, this.progress = void 0, this.lastProgress = void 0, this.modularInstance = void 0, this.progressModularModules = void 0, this.isInview = void 0, this.isInteractive = void 0, this.isInFold = void 0, this.isFirstResize = void 0, this.subscribeElementUpdateFn = void 0, this.unsubscribeElementUpdateFn = void 0, this.$el = t, this.id = s, this.needRaf = l, this.scrollOrientation = n, this.modularInstance = e, this.subscribeElementUpdateFn = i, this.unsubscribeElementUpdateFn = r, this.attributes = {\n            scrollClass: null != (o = this.$el.dataset.scrollClass) ? o : \"is-inview\",\n            scrollOffset: null != (a = this.$el.dataset.scrollOffset) ? a : \"0,0\",\n            scrollPosition: null != (c = this.$el.dataset.scrollPosition) ? c : \"start,end\",\n            scrollModuleProgress: null != this.$el.dataset.scrollModuleProgress,\n            scrollCssProgress: null != this.$el.dataset.scrollCssProgress,\n            scrollEventProgress: null != (h = this.$el.dataset.scrollEventProgress) ? h : null,\n            scrollSpeed: null != this.$el.dataset.scrollSpeed ? parseFloat(this.$el.dataset.scrollSpeed) : null,\n            scrollRepeat: null != this.$el.dataset.scrollRepeat,\n            scrollCall: null != (d = this.$el.dataset.scrollCall) ? d : null,\n            scrollCallSelf: null != this.$el.dataset.scrollCallSelf,\n            scrollIgnoreFold: null != this.$el.dataset.scrollIgnoreFold,\n            scrollEnableTouchSpeed: null != this.$el.dataset.scrollEnableTouchSpeed\n        }, this.intersection = {\n            start: 0,\n            end: 0\n        }, this.metrics = {\n            offsetStart: 0,\n            offsetEnd: 0,\n            bcr: {}\n        }, this.currentScroll = \"vertical\" === this.scrollOrientation ? window.scrollY : window.scrollX, this.translateValue = 0, this.progress = 0, this.lastProgress = null, this.progressModularModules = [], this.isInview = !1, this.isInteractive = !1, this.isAlreadyIntersected = !1, this.isInFold = !1, this.isFirstResize = !0, this._init();\n    }\n}\nconst n = [\n    \"scrollOffset\",\n    \"scrollPosition\",\n    \"scrollModuleProgress\",\n    \"scrollCssProgress\",\n    \"scrollEventProgress\",\n    \"scrollSpeed\"\n];\nclass o {\n    _init() {\n        const t = this.$scrollContainer.querySelectorAll(\"[data-scroll]\"), s = Array.from(t);\n        this._subscribeScrollElements(s), this.IOTriggerInstance = new e({\n            scrollElements: [\n                ...this.triggeredScrollElements\n            ],\n            rootMargin: this.triggerRootMargin,\n            IORaf: !1\n        }), this.IORafInstance = new e({\n            scrollElements: [\n                ...this.RAFScrollElements\n            ],\n            rootMargin: this.rafRootMargin,\n            IORaf: !0\n        });\n    }\n    destroy() {\n        this.IOTriggerInstance.destroy(), this.IORafInstance.destroy(), this._unsubscribeAllScrollElements();\n    }\n    onResize(param) {\n        let { currentScroll: t } = param;\n        for (const s of this.RAFScrollElements)s.onResize({\n            currentScroll: t\n        });\n    }\n    onRender(param) {\n        let { currentScroll: t, smooth: s } = param;\n        for (const e of this.scrollElementsToUpdate)e.onRender({\n            currentScroll: t,\n            smooth: s\n        });\n    }\n    removeScrollElements(t) {\n        const s = t.querySelectorAll(\"[data-scroll]\");\n        if (s.length) {\n            for(let t = 0; t < this.triggeredScrollElements.length; t++){\n                const e = this.triggeredScrollElements[t];\n                Array.from(s).indexOf(e.$el) > -1 && (this.IOTriggerInstance.unobserve(e.$el), this.triggeredScrollElements.splice(t, 1));\n            }\n            for(let t = 0; t < this.RAFScrollElements.length; t++){\n                const e = this.RAFScrollElements[t];\n                Array.from(s).indexOf(e.$el) > -1 && (this.IORafInstance.unobserve(e.$el), this.RAFScrollElements.splice(t, 1));\n            }\n            s.forEach((t)=>{\n                const s = this.scrollElementsToUpdate.find((s)=>s.$el === t), e = this.scrollElements.find((s)=>s.$el === t);\n                s && this._unsubscribeElementUpdate(s), e && (this.scrollElements = this.scrollElements.filter((t)=>t.id != e.id));\n            });\n        }\n    }\n    addScrollElements(t) {\n        const s = t.querySelectorAll(\"[data-scroll]\"), e = [];\n        this.scrollElements.forEach((t)=>{\n            e.push(t.id);\n        });\n        const i = Math.max(...e) + 1, r = Array.from(s);\n        this._subscribeScrollElements(r, i, !0);\n    }\n    _subscribeScrollElements(t) {\n        let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n        for(let i = 0; i < t.length; i++){\n            const r = t[i], n = this._checkRafNeeded(r), o = new l({\n                $el: r,\n                id: s + i,\n                scrollOrientation: this.scrollOrientation,\n                modularInstance: this.modularInstance,\n                subscribeElementUpdateFn: this._subscribeElementUpdate.bind(this),\n                unsubscribeElementUpdateFn: this._unsubscribeElementUpdate.bind(this),\n                needRaf: n\n            });\n            this.scrollElements.push(o), n ? (this.RAFScrollElements.push(o), e && (this.IORafInstance.scrollElements.push(o), this.IORafInstance.observe(o.$el))) : (this.triggeredScrollElements.push(o), e && (this.IOTriggerInstance.scrollElements.push(o), this.IOTriggerInstance.observe(o.$el)));\n        }\n    }\n    _unsubscribeAllScrollElements() {\n        this.scrollElements = [], this.RAFScrollElements = [], this.triggeredScrollElements = [], this.scrollElementsToUpdate = [];\n    }\n    _subscribeElementUpdate(t) {\n        this.scrollElementsToUpdate.push(t);\n    }\n    _unsubscribeElementUpdate(t) {\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter((s)=>s.id != t.id);\n    }\n    _checkRafNeeded(t) {\n        let s = [\n            ...n\n        ];\n        const e = (t)=>{\n            s = s.filter((s)=>s != t);\n        };\n        if (t.dataset.scrollOffset) {\n            if (\"0,0\" != t.dataset.scrollOffset.split(\",\").map((t)=>t.replace(\"%\", \"\").trim()).join(\",\")) return !0;\n            e(\"scrollOffset\");\n        } else e(\"scrollOffset\");\n        if (t.dataset.scrollPosition) {\n            if (\"top,bottom\" != t.dataset.scrollPosition.trim()) return !0;\n            e(\"scrollPosition\");\n        } else e(\"scrollPosition\");\n        if (t.dataset.scrollSpeed && !isNaN(parseFloat(t.dataset.scrollSpeed))) return !0;\n        e(\"scrollSpeed\");\n        for (const e of s)if (e in t.dataset) return !0;\n        return !1;\n    }\n    constructor({ $el: t, modularInstance: s, triggerRootMargin: e, rafRootMargin: i, scrollOrientation: r }){\n        this.$scrollContainer = void 0, this.modularInstance = void 0, this.triggerRootMargin = void 0, this.rafRootMargin = void 0, this.scrollElements = void 0, this.triggeredScrollElements = void 0, this.RAFScrollElements = void 0, this.scrollElementsToUpdate = void 0, this.IOTriggerInstance = void 0, this.IORafInstance = void 0, this.scrollOrientation = void 0, t ? (this.$scrollContainer = t, this.modularInstance = s, this.scrollOrientation = r, this.triggerRootMargin = null != e ? e : \"-1px -1px -1px -1px\", this.rafRootMargin = null != i ? i : \"100% 100% 100% 100%\", this.scrollElements = [], this.triggeredScrollElements = [], this.RAFScrollElements = [], this.scrollElementsToUpdate = [], this._init()) : console.error(\"Please provide a DOM Element as scrollContainer\");\n    }\n}\nclass a {\n    _init() {\n        this.observer = new ResizeObserver((t)=>{\n            var s;\n            !this.isFirstObserve && (null == (s = this.resizeCallback) || s.call(this)), this.isFirstObserve = !1;\n        });\n        for (const t of this.$resizeElements)this.observer.observe(t);\n    }\n    destroy() {\n        this.observer.disconnect();\n    }\n    constructor({ resizeElements: t, resizeCallback: s = ()=>{} }){\n        this.$resizeElements = void 0, this.isFirstObserve = void 0, this.observer = void 0, this.resizeCallback = void 0, this.$resizeElements = t, this.resizeCallback = s, this.isFirstObserve = !0, this._init();\n    }\n}\nconst c = {\n    wrapper: window,\n    content: document.documentElement,\n    eventsTarget: window,\n    lerp: .1,\n    duration: .75,\n    orientation: \"vertical\",\n    gestureOrientation: \"vertical\",\n    smoothWheel: !0,\n    smoothTouch: !1,\n    syncTouch: !1,\n    syncTouchLerp: .1,\n    touchInertiaMultiplier: 35,\n    wheelMultiplier: 1,\n    touchMultiplier: 2,\n    normalizeWheel: !1,\n    autoResize: !0,\n    easing: (t)=>Math.min(1, 1.001 - Math.pow(2, -10 * t))\n};\nclass h {\n    _init() {\n        var s;\n        this.lenisInstance = new _studio_freight_lenis__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            wrapper: this.lenisOptions.wrapper,\n            content: this.lenisOptions.content,\n            eventsTarget: this.lenisOptions.eventsTarget,\n            lerp: this.lenisOptions.lerp,\n            duration: this.lenisOptions.duration,\n            orientation: this.lenisOptions.orientation,\n            gestureOrientation: this.lenisOptions.gestureOrientation,\n            smoothWheel: this.lenisOptions.smoothWheel,\n            smoothTouch: this.lenisOptions.smoothTouch,\n            syncTouch: this.lenisOptions.syncTouch,\n            syncTouchLerp: this.lenisOptions.syncTouchLerp,\n            touchInertiaMultiplier: this.lenisOptions.touchInertiaMultiplier,\n            wheelMultiplier: this.lenisOptions.wheelMultiplier,\n            touchMultiplier: this.lenisOptions.touchMultiplier,\n            normalizeWheel: this.lenisOptions.normalizeWheel,\n            easing: this.lenisOptions.easing\n        }), null == (s = this.lenisInstance) || s.on(\"scroll\", this.scrollCallback), document.documentElement.setAttribute(\"data-scroll-orientation\", this.lenisInstance.options.orientation), requestAnimationFrame(()=>{\n            this.coreInstance = new o({\n                $el: this.lenisInstance.rootElement,\n                modularInstance: this.modularInstance,\n                triggerRootMargin: this.triggerRootMargin,\n                rafRootMargin: this.rafRootMargin,\n                scrollOrientation: this.lenisInstance.options.orientation\n            }), this._bindEvents(), this.initCustomTicker && !this.destroyCustomTicker ? console.warn(\"initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.\") : !this.initCustomTicker && this.destroyCustomTicker && console.warn(\"destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.\"), this.autoStart && this.start();\n        });\n    }\n    destroy() {\n        var t;\n        this.stop(), this._unbindEvents(), this.lenisInstance.destroy(), null == (t = this.coreInstance) || t.destroy(), requestAnimationFrame(()=>{\n            var t;\n            null == (t = this.coreInstance) || t.destroy();\n        });\n    }\n    _bindEvents() {\n        this._bindScrollToEvents(), this.autoResize && (\"ResizeObserver\" in window ? this.ROInstance = new a({\n            resizeElements: [\n                document.body\n            ],\n            resizeCallback: this._onResizeBind\n        }) : window.addEventListener(\"resize\", this._onResizeBind));\n    }\n    _unbindEvents() {\n        this._unbindScrollToEvents(), this.autoResize && (\"ResizeObserver\" in window ? this.ROInstance && this.ROInstance.destroy() : window.removeEventListener(\"resize\", this._onResizeBind));\n    }\n    _bindScrollToEvents(t) {\n        const s = t || this.lenisInstance.rootElement, e = null == s ? void 0 : s.querySelectorAll(\"[data-scroll-to]\");\n        (null == e ? void 0 : e.length) && e.forEach((t)=>{\n            t.addEventListener(\"click\", this._onScrollToBind, !1);\n        });\n    }\n    _unbindScrollToEvents(t) {\n        const s = t || this.lenisInstance.rootElement, e = null == s ? void 0 : s.querySelectorAll(\"[data-scroll-to]\");\n        (null == e ? void 0 : e.length) && e.forEach((t)=>{\n            t.removeEventListener(\"click\", this._onScrollToBind, !1);\n        });\n    }\n    _onResize() {\n        requestAnimationFrame(()=>{\n            var t;\n            null == (t = this.coreInstance) || t.onResize({\n                currentScroll: this.lenisInstance.scroll\n            });\n        });\n    }\n    _onRender() {\n        var t, s;\n        null == (t = this.lenisInstance) || t.raf(Date.now()), null == (s = this.coreInstance) || s.onRender({\n            currentScroll: this.lenisInstance.scroll,\n            smooth: this.lenisInstance.isSmooth\n        });\n    }\n    _onScrollTo(t) {\n        var s;\n        t.preventDefault();\n        const e = null != (s = t.currentTarget) ? s : null;\n        if (!e) return;\n        const i = e.getAttribute(\"data-scroll-to-href\") || e.getAttribute(\"href\"), r = e.getAttribute(\"data-scroll-to-offset\") || 0, l = e.getAttribute(\"data-scroll-to-duration\") || this.lenisOptions.duration || c.duration;\n        i && this.scrollTo(i, {\n            offset: \"string\" == typeof r ? parseInt(r) : r,\n            duration: \"string\" == typeof l ? parseInt(l) : l\n        });\n    }\n    start() {\n        var t;\n        this.rafPlaying || (null == (t = this.lenisInstance) || t.start(), this.rafPlaying = !0, this.initCustomTicker ? this.initCustomTicker(this._onRenderBind) : this._raf());\n    }\n    stop() {\n        var t;\n        this.rafPlaying && (null == (t = this.lenisInstance) || t.stop(), this.rafPlaying = !1, this.destroyCustomTicker ? this.destroyCustomTicker(this._onRenderBind) : this.rafInstance && cancelAnimationFrame(this.rafInstance));\n    }\n    removeScrollElements(t) {\n        var s;\n        t ? (this._unbindScrollToEvents(t), null == (s = this.coreInstance) || s.removeScrollElements(t)) : console.error(\"Please provide a DOM Element as $oldContainer\");\n    }\n    addScrollElements(t) {\n        var s;\n        t ? (null == (s = this.coreInstance) || s.addScrollElements(t), requestAnimationFrame(()=>{\n            this._bindScrollToEvents(t);\n        })) : console.error(\"Please provide a DOM Element as $newContainer\");\n    }\n    resize() {\n        this._onResizeBind();\n    }\n    scrollTo(t, s) {\n        var e;\n        null == (e = this.lenisInstance) || e.scrollTo(t, {\n            offset: null == s ? void 0 : s.offset,\n            lerp: null == s ? void 0 : s.lerp,\n            duration: null == s ? void 0 : s.duration,\n            immediate: null == s ? void 0 : s.immediate,\n            lock: null == s ? void 0 : s.lock,\n            force: null == s ? void 0 : s.force,\n            easing: null == s ? void 0 : s.easing,\n            onComplete: null == s ? void 0 : s.onComplete\n        });\n    }\n    _raf() {\n        this._onRenderBind(), this.rafInstance = requestAnimationFrame(()=>this._raf());\n    }\n    constructor({ lenisOptions: t = {}, modularInstance: e, triggerRootMargin: i, rafRootMargin: r, autoResize: l = !0, autoStart: n = !0, scrollCallback: o = ()=>{}, initCustomTicker: a, destroyCustomTicker: h } = {}){\n        this.rafPlaying = void 0, this.lenisInstance = void 0, this.coreInstance = void 0, this.lenisOptions = void 0, this.modularInstance = void 0, this.triggerRootMargin = void 0, this.rafRootMargin = void 0, this.rafInstance = void 0, this.autoResize = void 0, this.autoStart = void 0, this.ROInstance = void 0, this.initCustomTicker = void 0, this.destroyCustomTicker = void 0, this._onRenderBind = void 0, this._onResizeBind = void 0, this._onScrollToBind = void 0, this.lenisOptions = s({}, c, t), Object.assign(this, {\n            lenisOptions: t,\n            modularInstance: e,\n            triggerRootMargin: i,\n            rafRootMargin: r,\n            autoResize: l,\n            autoStart: n,\n            scrollCallback: o,\n            initCustomTicker: a,\n            destroyCustomTicker: h\n        }), this._onRenderBind = this._onRender.bind(this), this._onScrollToBind = this._onScrollTo.bind(this), this._onResizeBind = this._onResize.bind(this), this.rafPlaying = !1, this._init();\n    }\n}\n //# sourceMappingURL=locomotive-scroll.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/locomotive-scroll/dist/locomotive-scroll.modern.mjs\n"));

/***/ })

}]);