"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@studio-freight";
exports.ids = ["vendor-chunks/@studio-freight"];
exports.modules = {

/***/ "(ssr)/./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ l)\n/* harmony export */ });\nfunction t() {\n    return t = Object.assign ? Object.assign.bind() : function(t) {\n        for(var e = 1; e < arguments.length; e++){\n            var i = arguments[e];\n            for(var s in i)Object.prototype.hasOwnProperty.call(i, s) && (t[s] = i[s]);\n        }\n        return t;\n    }, t.apply(this, arguments);\n}\nfunction e(t, e, i) {\n    return Math.max(t, Math.min(e, i));\n}\nclass i {\n    advance(t) {\n        var i;\n        if (!this.isRunning) return;\n        let s = !1;\n        if (this.lerp) this.value = (o = this.value, n = this.to, (1 - (l = 1 - Math.exp(-60 * this.lerp * t))) * o + l * n), Math.round(this.value) === this.to && (this.value = this.to, s = !0);\n        else {\n            this.currentTime += t;\n            const i = e(0, this.currentTime / this.duration, 1);\n            s = i >= 1;\n            const o = s ? 1 : this.easing(i);\n            this.value = this.from + (this.to - this.from) * o;\n        }\n        var o, n, l;\n        null == (i = this.onUpdate) || i.call(this, this.value, s), s && this.stop();\n    }\n    stop() {\n        this.isRunning = !1;\n    }\n    fromTo(t, e, { lerp: i = .1, duration: s = 1, easing: o = (t)=>t, onStart: n, onUpdate: l }) {\n        this.from = this.value = t, this.to = e, this.lerp = i, this.duration = s, this.easing = o, this.currentTime = 0, this.isRunning = !0, null == n || n(), this.onUpdate = l;\n    }\n}\nclass s {\n    constructor({ wrapper: t, content: e, autoResize: i = !0 } = {}){\n        if (this.resize = ()=>{\n            this.onWrapperResize(), this.onContentResize();\n        }, this.onWrapperResize = ()=>{\n            this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);\n        }, this.onContentResize = ()=>{\n            this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth;\n        }, this.wrapper = t, this.content = e, i) {\n            const t = function(t, e) {\n                let i;\n                return function() {\n                    let e = arguments, s = this;\n                    clearTimeout(i), i = setTimeout(function() {\n                        t.apply(s, e);\n                    }, 250);\n                };\n            }(this.resize);\n            this.wrapper !== window && (this.wrapperResizeObserver = new ResizeObserver(t), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(t), this.contentResizeObserver.observe(this.content);\n        }\n        this.resize();\n    }\n    destroy() {\n        var t, e;\n        null == (t = this.wrapperResizeObserver) || t.disconnect(), null == (e = this.contentResizeObserver) || e.disconnect();\n    }\n    get limit() {\n        return {\n            x: this.scrollWidth - this.width,\n            y: this.scrollHeight - this.height\n        };\n    }\n}\nclass o {\n    constructor(){\n        this.events = {};\n    }\n    emit(t, ...e) {\n        let i = this.events[t] || [];\n        for(let t = 0, s = i.length; t < s; t++)i[t](...e);\n    }\n    on(t, e) {\n        var i;\n        return (null == (i = this.events[t]) ? void 0 : i.push(e)) || (this.events[t] = [\n            e\n        ]), ()=>{\n            var i;\n            this.events[t] = null == (i = this.events[t]) ? void 0 : i.filter((t)=>e !== t);\n        };\n    }\n    off(t, e) {\n        var i;\n        this.events[t] = null == (i = this.events[t]) ? void 0 : i.filter((t)=>e !== t);\n    }\n    destroy() {\n        this.events = {};\n    }\n}\nclass n {\n    constructor(t, { wheelMultiplier: i = 1, touchMultiplier: s = 2, normalizeWheel: n = !1 }){\n        this.onTouchStart = (t)=>{\n            const { clientX: e, clientY: i } = t.targetTouches ? t.targetTouches[0] : t;\n            this.touchStart.x = e, this.touchStart.y = i, this.lastDelta = {\n                x: 0,\n                y: 0\n            };\n        }, this.onTouchMove = (t)=>{\n            const { clientX: e, clientY: i } = t.targetTouches ? t.targetTouches[0] : t, s = -(e - this.touchStart.x) * this.touchMultiplier, o = -(i - this.touchStart.y) * this.touchMultiplier;\n            this.touchStart.x = e, this.touchStart.y = i, this.lastDelta = {\n                x: s,\n                y: o\n            }, this.emitter.emit(\"scroll\", {\n                deltaX: s,\n                deltaY: o,\n                event: t\n            });\n        }, this.onTouchEnd = (t)=>{\n            this.emitter.emit(\"scroll\", {\n                deltaX: this.lastDelta.x,\n                deltaY: this.lastDelta.y,\n                event: t\n            });\n        }, this.onWheel = (t)=>{\n            let { deltaX: i, deltaY: s } = t;\n            this.normalizeWheel && (i = e(-100, i, 100), s = e(-100, s, 100)), i *= this.wheelMultiplier, s *= this.wheelMultiplier, this.emitter.emit(\"scroll\", {\n                deltaX: i,\n                deltaY: s,\n                event: t\n            });\n        }, this.element = t, this.wheelMultiplier = i, this.touchMultiplier = s, this.normalizeWheel = n, this.touchStart = {\n            x: null,\n            y: null\n        }, this.emitter = new o, this.element.addEventListener(\"wheel\", this.onWheel, {\n            passive: !1\n        }), this.element.addEventListener(\"touchstart\", this.onTouchStart, {\n            passive: !1\n        }), this.element.addEventListener(\"touchmove\", this.onTouchMove, {\n            passive: !1\n        }), this.element.addEventListener(\"touchend\", this.onTouchEnd, {\n            passive: !1\n        });\n    }\n    on(t, e) {\n        return this.emitter.on(t, e);\n    }\n    destroy() {\n        this.emitter.destroy(), this.element.removeEventListener(\"wheel\", this.onWheel, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchstart\", this.onTouchStart, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchmove\", this.onTouchMove, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchend\", this.onTouchEnd, {\n            passive: !1\n        });\n    }\n}\nclass l {\n    constructor({ wrapper: e = window, content: l = document.documentElement, wheelEventsTarget: r = e, eventsTarget: h = r, smoothWheel: a = !0, smoothTouch: c = !1, syncTouch: u = !1, syncTouchLerp: p = .1, __iosNoInertiaSyncTouchLerp: d = .4, touchInertiaMultiplier: m = 35, duration: v, easing: g = (t)=>Math.min(1, 1.001 - Math.pow(2, -10 * t)), lerp: S = !v && .1, infinite: w = !1, orientation: f = \"vertical\", gestureOrientation: y = \"vertical\", touchMultiplier: T = 1, wheelMultiplier: z = 1, normalizeWheel: _ = !1, autoResize: M = !0 } = {}){\n        this.onVirtualScroll = ({ deltaX: e, deltaY: i, event: s })=>{\n            if (s.ctrlKey) return;\n            const o = s.type.includes(\"touch\"), n = s.type.includes(\"wheel\");\n            if (\"both\" === this.options.gestureOrientation && 0 === e && 0 === i || \"vertical\" === this.options.gestureOrientation && 0 === i || \"horizontal\" === this.options.gestureOrientation && 0 === e || o && \"vertical\" === this.options.gestureOrientation && 0 === this.scroll && !this.options.infinite && i <= 0) return;\n            let l = s.composedPath();\n            if (l = l.slice(0, l.indexOf(this.rootElement)), l.find((t)=>{\n                var e;\n                return (null == t.hasAttribute ? void 0 : t.hasAttribute(\"data-lenis-prevent\")) || o && (null == t.hasAttribute ? void 0 : t.hasAttribute(\"data-lenis-prevent-touch\")) || n && (null == t.hasAttribute ? void 0 : t.hasAttribute(\"data-lenis-prevent-wheel\")) || (null == (e = t.classList) ? void 0 : e.contains(\"lenis\"));\n            })) return;\n            if (this.isStopped || this.isLocked) return void s.preventDefault();\n            if (this.isSmooth = (this.options.smoothTouch || this.options.syncTouch) && o || this.options.smoothWheel && n, !this.isSmooth) return this.isScrolling = !1, void this.animate.stop();\n            s.preventDefault();\n            let r = i;\n            \"both\" === this.options.gestureOrientation ? r = Math.abs(i) > Math.abs(e) ? i : e : \"horizontal\" === this.options.gestureOrientation && (r = e);\n            const h = o && this.options.syncTouch, a = o && \"touchend\" === s.type && Math.abs(r) > 1;\n            a && (r = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + r, t({\n                programmatic: !1\n            }, h && {\n                lerp: a ? this.syncTouchLerp : this.options.__iosNoInertiaSyncTouchLerp\n            }));\n        }, this.onNativeScroll = ()=>{\n            if (!this.__preventNextScrollEvent && !this.isScrolling) {\n                const t = this.animatedScroll;\n                this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.direction = Math.sign(this.animatedScroll - t), this.emit();\n            }\n        }, window.lenisVersion = \"1.0.29\", e !== document.documentElement && e !== document.body || (e = window), this.options = {\n            wrapper: e,\n            content: l,\n            wheelEventsTarget: r,\n            eventsTarget: h,\n            smoothWheel: a,\n            smoothTouch: c,\n            syncTouch: u,\n            syncTouchLerp: p,\n            __iosNoInertiaSyncTouchLerp: d,\n            touchInertiaMultiplier: m,\n            duration: v,\n            easing: g,\n            lerp: S,\n            infinite: w,\n            gestureOrientation: y,\n            orientation: f,\n            touchMultiplier: T,\n            wheelMultiplier: z,\n            normalizeWheel: _,\n            autoResize: M\n        }, this.animate = new i, this.emitter = new o, this.dimensions = new s({\n            wrapper: e,\n            content: l,\n            autoResize: M\n        }), this.toggleClass(\"lenis\", !0), this.velocity = 0, this.isLocked = !1, this.isStopped = !1, this.isSmooth = u || a || c, this.isScrolling = !1, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener(\"scroll\", this.onNativeScroll, {\n            passive: !1\n        }), this.virtualScroll = new n(h, {\n            touchMultiplier: T,\n            wheelMultiplier: z,\n            normalizeWheel: _\n        }), this.virtualScroll.on(\"scroll\", this.onVirtualScroll);\n    }\n    destroy() {\n        this.emitter.destroy(), this.options.wrapper.removeEventListener(\"scroll\", this.onNativeScroll, {\n            passive: !1\n        }), this.virtualScroll.destroy(), this.dimensions.destroy(), this.toggleClass(\"lenis\", !1), this.toggleClass(\"lenis-smooth\", !1), this.toggleClass(\"lenis-scrolling\", !1), this.toggleClass(\"lenis-stopped\", !1), this.toggleClass(\"lenis-locked\", !1);\n    }\n    on(t, e) {\n        return this.emitter.on(t, e);\n    }\n    off(t, e) {\n        return this.emitter.off(t, e);\n    }\n    setScroll(t) {\n        this.isHorizontal ? this.rootElement.scrollLeft = t : this.rootElement.scrollTop = t;\n    }\n    resize() {\n        this.dimensions.resize();\n    }\n    emit() {\n        this.emitter.emit(\"scroll\", this);\n    }\n    reset() {\n        this.isLocked = !1, this.isScrolling = !1, this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.animate.stop();\n    }\n    start() {\n        this.isStopped = !1, this.reset();\n    }\n    stop() {\n        this.isStopped = !0, this.animate.stop(), this.reset();\n    }\n    raf(t) {\n        const e = t - (this.time || t);\n        this.time = t, this.animate.advance(.001 * e);\n    }\n    scrollTo(t, { offset: i = 0, immediate: s = !1, lock: o = !1, duration: n = this.options.duration, easing: l = this.options.easing, lerp: r = !n && this.options.lerp, onComplete: h = null, force: a = !1, programmatic: c = !0 } = {}) {\n        if (!this.isStopped && !this.isLocked || a) {\n            if ([\n                \"top\",\n                \"left\",\n                \"start\"\n            ].includes(t)) t = 0;\n            else if ([\n                \"bottom\",\n                \"right\",\n                \"end\"\n            ].includes(t)) t = this.limit;\n            else {\n                var u;\n                let e;\n                if (\"string\" == typeof t ? e = document.querySelector(t) : null != (u = t) && u.nodeType && (e = t), e) {\n                    if (this.options.wrapper !== window) {\n                        const t = this.options.wrapper.getBoundingClientRect();\n                        i -= this.isHorizontal ? t.left : t.top;\n                    }\n                    const s = e.getBoundingClientRect();\n                    t = (this.isHorizontal ? s.left : s.top) + this.animatedScroll;\n                }\n            }\n            if (\"number\" == typeof t) {\n                if (t += i, t = Math.round(t), this.options.infinite ? c && (this.targetScroll = this.animatedScroll = this.scroll) : t = e(0, t, this.limit), s) return this.animatedScroll = this.targetScroll = t, this.setScroll(this.scroll), this.reset(), void (null == h || h(this));\n                if (!c) {\n                    if (t === this.targetScroll) return;\n                    this.targetScroll = t;\n                }\n                this.animate.fromTo(this.animatedScroll, t, {\n                    duration: n,\n                    easing: l,\n                    lerp: r,\n                    onStart: ()=>{\n                        o && (this.isLocked = !0), this.isScrolling = !0;\n                    },\n                    onUpdate: (t, e)=>{\n                        this.isScrolling = !0, this.velocity = t - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t, this.setScroll(this.scroll), c && (this.targetScroll = t), e || this.emit(), e && (this.reset(), this.emit(), null == h || h(this), this.__preventNextScrollEvent = !0, requestAnimationFrame(()=>{\n                            delete this.__preventNextScrollEvent;\n                        }));\n                    }\n                });\n            }\n        }\n    }\n    get rootElement() {\n        return this.options.wrapper === window ? document.documentElement : this.options.wrapper;\n    }\n    get limit() {\n        return this.dimensions.limit[this.isHorizontal ? \"x\" : \"y\"];\n    }\n    get isHorizontal() {\n        return \"horizontal\" === this.options.orientation;\n    }\n    get actualScroll() {\n        return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;\n    }\n    get scroll() {\n        return this.options.infinite ? (this.animatedScroll % (t = this.limit) + t) % t : this.animatedScroll;\n        var t;\n    }\n    get progress() {\n        return 0 === this.limit ? 1 : this.scroll / this.limit;\n    }\n    get isSmooth() {\n        return this.__isSmooth;\n    }\n    set isSmooth(t) {\n        this.__isSmooth !== t && (this.__isSmooth = t, this.toggleClass(\"lenis-smooth\", t));\n    }\n    get isScrolling() {\n        return this.__isScrolling;\n    }\n    set isScrolling(t) {\n        this.__isScrolling !== t && (this.__isScrolling = t, this.toggleClass(\"lenis-scrolling\", t));\n    }\n    get isStopped() {\n        return this.__isStopped;\n    }\n    set isStopped(t) {\n        this.__isStopped !== t && (this.__isStopped = t, this.toggleClass(\"lenis-stopped\", t));\n    }\n    get isLocked() {\n        return this.__isLocked;\n    }\n    set isLocked(t) {\n        this.__isLocked !== t && (this.__isLocked = t, this.toggleClass(\"lenis-locked\", t));\n    }\n    get className() {\n        let t = \"lenis\";\n        return this.isStopped && (t += \" lenis-stopped\"), this.isLocked && (t += \" lenis-locked\"), this.isScrolling && (t += \" lenis-scrolling\"), this.isSmooth && (t += \" lenis-smooth\"), t;\n    }\n    toggleClass(t, e) {\n        this.rootElement.classList.toggle(t, e), this.emitter.emit(\"className change\", this);\n    }\n}\n //# sourceMappingURL=lenis.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs\n");

/***/ })

};
;